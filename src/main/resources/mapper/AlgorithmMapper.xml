<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rei.algo.mapper.AlgorithmMapper">

    <resultMap id="BaseResultMap" type="com.rei.algo.model.entity.Algorithm">
        <id property="algoId" column="algo_id"/>
        <result property="userId" column="user_id"/>
        <result property="title" column="title"/>
        <result property="description" column="description"/>
        <result property="codeContent" column="code_content"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="isPublic" column="is_public"/>
        <!-- 可以按需添加关联 User 的映射 -->
        <!-- <association property="user" javaType="com.rei.algo.model.entity.User">
            <id property="userId" column="u_user_id"/>
            <result property="username" column="u_username"/>
             <result property="avatarUrl" column="u_avatar_url"/>
        </association> -->
    </resultMap>

    <sql id="Base_Column_List">
        algo_id, user_id, title, description, code_content, created_at, updated_at, is_public
    </sql>

    <insert id="insert" parameterType="com.rei.algo.model.entity.Algorithm">
        INSERT INTO algorithm (algo_id, user_id, title, description, code_content, created_at, updated_at, is_public)
        VALUES (#{algoId}, #{userId}, #{title}, #{description}, #{codeContent}, #{createdAt, jdbcType=TIMESTAMP}, #{updatedAt, jdbcType=TIMESTAMP}, #{isPublic})
    </insert>

    <update id="update" parameterType="com.rei.algo.model.entity.Algorithm">
        UPDATE algorithm
        <set>
            <if test="title != null and title != ''">title = #{title},</if>
            <if test="description != null">description = #{description},</if>
            <if test="codeContent != null">code_content = #{codeContent},</if>
            <if test="isPublic != null">is_public = #{isPublic},</if>
            updated_at = NOW(), <!-- 也可以在实体类中设置 updated_at，然后直接使用 #{updatedAt} -->
        </set>
        WHERE algo_id = #{algoId}
        <!-- 可以添加 AND user_id = #{userId} 来确保用户只能修改自己的算法 -->
    </update>

    <delete id="deleteById">
        DELETE FROM algorithm WHERE algo_id = #{algoId}
        <!-- 可以添加 AND user_id = ? 来确保用户只能删除自己的算法 (如果需要的话) -->
    </delete>

    <select id="findById" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM algorithm
        WHERE algo_id = #{algoId}
    </select>

    <select id="findByUserId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM algorithm
        WHERE user_id = #{userId}
        ORDER BY created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="countByUserId" resultType="long">
        SELECT COUNT(*)
        FROM algorithm
        WHERE user_id = #{userId}
    </select>

    <select id="searchPublic" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM algorithm
        WHERE is_public = TRUE
          AND (title LIKE CONCAT('%', #{keyword}, '%') OR description LIKE CONCAT('%', #{keyword}, '%'))
        ORDER BY updated_at DESC, created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="countPublicByKeyword" resultType="long">
        SELECT COUNT(*)
        FROM algorithm
        WHERE is_public = TRUE
          AND (title LIKE CONCAT('%', #{keyword}, '%') OR description LIKE CONCAT('%', #{keyword}, '%'))
    </select>

    <select id="findAllPublic" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM algorithm
        WHERE is_public = TRUE
        ORDER BY updated_at DESC, created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="countAllPublic" resultType="long">
        SELECT COUNT(*)
        FROM algorithm
        WHERE is_public = TRUE
    </select>

</mapper> 